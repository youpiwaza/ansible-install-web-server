version: "3.7"

##---
## ðŸ¤– This file has been generated automatically through Ansible and **should not be edited by hand**.
## See the [original script](https://github.com/youpiwaza/ansible-install-web-server/blob/master/ansible/roles/core-reverse-proxy-traefik--generate/tasks/generate.yml)
## & [original template file](https://github.com/youpiwaza/ansible-install-web-server/blob/master/ansible/roles/core-reverse-proxy-traefik--generate/templates/traefik.yml.j2).
## *Generated (yyyy-mm-dd) {{ currentDateTime }}*.
##---

# Based on traefik image
#   https://hub.docker.com/_/traefik
#   https://doc.traefik.io/traefik/

# Usage
# - Need network & volume creation/config before start, see ansible-install-web-server/ansible/roles/core-reverse-proxy-traefik--run/tasks/main.yml
#     Classic
# > docker-compose -f traefik.yml up -d
#     Logs
# > docker-compose -f traefik.yml up
#     Stop
# > docker-compose -f traefik.yml down

# Original setup & tests project
#   https://github.com/youpiwaza/server-related-tutorials/tree/master/01-docker/04-my-tests/09-traefik-curated
# Final stuff, debugged & fine tuned with helloworld test projects
#   https://github.com/youpiwaza/server-related-tutorials/01-docker/04-my-tests/09-traefik-curated/11-prod-hello-curated/08-hello-stack-curated-comments

# Issues & fixes
#   Access to docker socket is a security risk
#   > Grant access through a proxy container
#   > Socket access with read-only volume

#   Privileged is mandatory to access docker socket, and is also a security risk
#   > Only the proxy container is privileged
#     Priviledged incompatible with user namespace remap.
#     > Force disable user namespace remap on proxy
#       userns_mode: "host" not compatible with docker stack
#       > Will be used through docker compose
#       > Also enable the use of a bridge network

#   Stack only allow overlay networks > security risk
#   > Use docker compose for Traefik & proxy, and set a custom bridge network
#     > non attachable
#     > encrypted
#   > Create a traefik dedicated overlay network

# Cpu & memory restrictions not available in docker compose v3
#   https://docs.docker.com/compose/compose-file/#resources

# Scaling > Nothing in docker-compose file syntax
# > scale on startup
#     docker-compose -f traefik.yml up --scale dockersocketproxy=2
# Only scale the proxy, as traefik has host port 80 published, and 2nd replicas can't have it too
#   Starting tests_traefik_1                        ... done                                                                                                                                                                      Creating tests_traefik_2                        ...
#   Creating tests_traefik_2                        ... error 
#   Bind for 0.0.0.0:80 failed: port is already allocated

# Use named volumes (with pre-existing files/folders, properly chowned) for traefik logs & https

# ulimits > kinda random as I couldn't find any recommandations. Just doubled my defaults.
# TODO : docker stats > analyse > define
#         proxy > ~ 5mo RAM, CPU ~null
#         traefik > ~ 40mo RAM, CPU max 20% of wtv the fuck is defined now, when a little stressed

services:
  dockersocketproxy:
    cap_drop:
      - ALL
    environment:
      # Authorize access
      NETWORKS: 1
      SERVICES: 1
      TASKS: 1
    image: '{{ core_install_reverse_proxy__docker_socket_proxy_image }}'
    labels:
      fr.masamune.client: 'masamune'
      fr.masamune.maintainer: 'masamune.code@gmail.com'
      fr.masamune.project: 'docker socket proxy'
      fr.masamune.type: 'core'
    # docker-compose interactive debug
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    # Traefik's docker socket access on dedicated bridge network
    networks:
      - core---traefik-proxy
    ports:
      # Publish on (usual) tcp port
      - 2375
    privileged: true
    # KO / Prevent modifications
    # read_only: true
    # Restart in case of server reboot
    restart: unless-stopped
    security_opt:
      - apparmor=docker-default
      - no-new-privileges=true
      - seccomp=/etc/docker/seccomp-profiles/default-docker-profile.json
    ulimits:
      nproc: 
        hard: 20000
        soft: 10000
      nofile:
        hard: 1000
        soft: 500
    userns_mode: "host"
    volumes:
      # Access to socket, read-only for security
      # - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - type: bind
        read_only: true
        source: /var/run/docker.sock
        target: /var/run/docker.sock
  
  traefik:
    cap_add:
      - CAP_NET_BIND_SERVICE
    cap_drop:
      - ALL
    command:
      # # Enable access logs
      # # Or not, as is tends to tear TTFB to pieces !?
      # # Edit 11/2020 : Might have a concrete solution for log rotation : https://doc.traefik.io/traefik/observability/access-logs/#log-rotation
      # - "--accesslog=true"
      - "--accesslog=false"
      # - "--accesslog.bufferingsize=100"
      # - "--accesslog.filepath=/home/logs/traefik-access.log"
      
      # HTTPS certificates
      #   Use staging for tests, to avoid proc'ing the limits (~1week black listed)
      #   KEYWORD: https, Let's Encrypt, LetsEncrypt, not working, black list, limit exceeded, exceeding, Limit Reached
      # LATER: convert to ansible var
      # - "--certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.leresolver.acme.email=masamune.code@gmail.com"
      - "--certificatesresolvers.leresolver.acme.storage=/home/https/acme.json"
      - "--certificatesresolvers.leresolver.acme.tlschallenge=true"
      
      # Specify internet access > HTTP 80 & HTTPS 443
      # Note that "web" & "websecure" are abitrary names, but will be reused in services' contrainers
      - "--entrypoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      
      # Send Traefik anonymous usage data / https://docs.traefik.io/contributing/data-collection/
      - "--global.sendAnonymousUsage"
      
      # Enable logs
      - "--log.filePath=/home/logs/traefik-debug.log"
      # - "--log.format=common"
      - "--log.format=json"
      # - "--log.level=DEBUG"
      - "--log.level=ERROR"
      
      # Allow pings, for traefik healthchecks
      - "--ping=true"
      
      # Traefik socket access from the proxy container, on the defined port
      - "--providers.docker.endpoint=tcp://dockersocketproxy:2375"
      
      # Only specified containers exposed on the internet
      - "--providers.docker.exposedbydefault=false"
      # Tell Traefik to get the contents provided by this service using a dedicated shared attachable overlay network.
      - "--providers.docker.network=core---traefik-public--access-internet"
      
      # Enable docker swarm
      - "--providers.docker.swarmMode=true"
    depends_on:
      - dockersocketproxy
    healthcheck:
      test: 'traefik healthcheck --ping'
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 0s
    # # In case of migration break the glass / https://doc.traefik.io/traefik/migration/v2/
    # {{ core_install_reverse_proxy__traefik_image_label }}
    image: '{{ core_install_reverse_proxy__traefik_image }}'
    labels:
      - "fr.masamune.client: 'masamune'"
      - "fr.masamune.maintainer: 'masamune.code@gmail.com'"
      - "fr.masamune.project: 'reverse proxy / traefik'"
      - "fr.masamune.type: 'core'"
    # Traefik doesn't support syslog
    # Note that enabling logs in command: will redirect logs, and they will be no longer displayed (if not used in detached mode)
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    networks:
      # Traefik's docker socket access on dedicated network
      - core---traefik-proxy
      # Traefik access to web server containers, to allow reverse proxy serving
      - core---traefik-public--access-internet
    ports:
      # Need to be binded
      - "80:80"
      - "443:443"
    # Prevent modifications
    read_only: true
    # Restart in case of server reboot
    restart: unless-stopped
    security_opt:
      - apparmor=docker-default
      - no-new-privileges=true
      - seccomp=/etc/docker/seccomp-profiles/default-docker-profile.json
    # Specific unprivileged user needs access to ports < 1024
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 0
    # Assign the_docker_peon unprivileged user
    user: 1003:1003
    ulimits:
      nofile: 
        hard: 20000
        soft: 10000
      nproc:
        hard: 1000
        soft: 500
    volumes:
      # Store HTTPS certificates in a named volume
      # Traefik needs full access (incl. file creation) on acme.json > chown -R on the volume's /https folder
      #   For concurrency reason, this file (acme.json) cannot be shared across multiple instances of Traefik.
      #     https://docs.traefik.io/https/acme/#storage
      - type: volume
        read_only: false
        source: core---traefik--https-certificates
        target: /home
      # Send logs to a named volume
      - type: volume
        read_only: false
        source: core---traefik--logs
        target: /home/logs

networks:
  core---traefik-proxy:
    # Prevent access to this network from other containers
    attachable: false
    # Force default driver as it will be used from docker compose, exclusively for proxy & traefik
    driver: bridge
    driver_opts:
      # Since we're passing docker socket stuff over TCP, lets IPSec
      encrypted: 'true'
    labels:
      fr.masamune.client: 'masamune'
      fr.masamune.maintainer: 'masamune.code@gmail.com'
      fr.masamune.project: 'docker socket proxy dedicated network'
      fr.masamune.type: 'core'

  # Needs to be created before using docker compose
  #   In order to:
  #   - be accessible to futur stacks
  #   - have a set name without automatic prefix
  # > docker network create --driver=overlay --attachable core---traefik-public--access-internet
  core---traefik-public--access-internet:
    external: true

volumes:
  # Needs to be created before using docker compose, do not recreate one with a prefix
  core---traefik--https-certificates:
    external: true
  # cf. server-related-tutorials/01-docker/04-my-tests/09-traefik-curated/06-prod-traefik-curated/README.md #### How to manage named volumes access rights
  core---traefik--logs:
    external: true