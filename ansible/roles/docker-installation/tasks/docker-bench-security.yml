---
### Docker bench security audit
#   https://github.com/docker/docker-bench-security

# /!\ Executing straight away the docker run command execute v.1.3.4
# Run the basic script to get the latest 1.3.5 (Needs sudo rights)
#   > cd
#   > git clone https://github.com/docker/docker-bench-security.git
#   > cd docker-bench-security
#   > sudo sh docker-bench-security.sh

# Prevent false positives > prune all (included all non used images)
# > docker system prune
# > docker image prune -a

#---

# Total Score > Warn Scored -1, Pass Scored +1, Not Score (INFO) -0

# Bench after having corrected steps 1 to 5
# > Checks: 107 / Score: 71 / 3 WARN (host partition, auth for docker clients commands, images healthcheck false positive)

# Original bench with a random container started, wo. flags
# > Checks: 105 / Score 26 / ~34 WARN

# ------------------------------------------------------------------------------
# Docker Bench for Security v1.3.4
#
# Docker, Inc. (c) 2015-
#
# Checks for dozens of common best-practices around deploying Docker containers in production.
# Inspired by the CIS Docker Community Edition Benchmark v1.1.0.
# ------------------------------------------------------------------------------

# Initializing Wed Apr  1 15:43:35 UTC 2020


# [INFO] 1 - Host Configuration
# [WARN] 1.1  - Ensure a separate partition for containers has been created
# [NOTE] 1.2  - Ensure the container host has been Hardened
# [INFO] 1.3  - Ensure Docker is up to date
# [INFO]      * Using 19.03.8, verify is it up to date as deemed necessary
# [INFO]      * Your operating system vendor may provide support and security maintenance for Docker
# [INFO] 1.4  - Ensure only trusted users are allowed to control Docker daemon
# [INFO]      * docker:x:999:the_docker_guy
# [WARN] 1.5  - Ensure auditing is configured for the Docker daemon
# [WARN] 1.6  - Ensure auditing is configured for Docker files and directories - /var/lib/docker
# [WARN] 1.7  - Ensure auditing is configured for Docker files and directories - /etc/docker
# [INFO] 1.8  - Ensure auditing is configured for Docker files and directories - docker.service
# [INFO]      * File not found
# [INFO] 1.9  - Ensure auditing is configured for Docker files and directories - docker.socket
# [INFO]      * File not found
# [WARN] 1.10  - Ensure auditing is configured for Docker files and directories - /etc/default/docker
# [WARN] 1.11  - Ensure auditing is configured for Docker files and directories - /etc/docker/daemon.json
# [INFO] 1.12  - Ensure auditing is configured for Docker files and directories - /usr/bin/docker-containerd
# [INFO]      * File not found
# [INFO] 1.13  - Ensure auditing is configured for Docker files and directories - /usr/bin/docker-runc
# [INFO]      * File not found


# [INFO] 2 - Docker daemon configuration
# [PASS] 2.1  - Ensure network traffic is restricted between containers on the default bridge
# [PASS] 2.2  - Ensure the logging level is set to 'info'
# [PASS] 2.3  - Ensure Docker is allowed to make changes to iptables
# [PASS] 2.4  - Ensure insecure registries are not used
# [PASS] 2.5  - Ensure aufs storage driver is not used
# [INFO] 2.6  - Ensure TLS authentication for Docker daemon is configured
# [INFO]      * Docker daemon not listening on TCP
# [PASS] 2.7  - Ensure the default ulimit is configured appropriately
# the_docker_guy:the_docker_guy
# [PASS] 2.8  - Enable user namespace support
# [PASS] 2.9  - Ensure the default cgroup usage has been confirmed
# [PASS] 2.10  - Ensure base device size is not changed until needed
# [WARN] 2.11  - Ensure that authorization for Docker client commands is enabled
# [WARN] 2.12  - Ensure centralized and remote logging is configured
# [INFO] 2.13  - Ensure operations on legacy registry (v1) are Disabled (Deprecated)
# [PASS] 2.14  - Ensure live restore is Enabled
# [WARN] 2.15  - Ensure Userland Proxy is Disabled
# [PASS] 2.16  - Ensure daemon-wide custom seccomp profile is applied, if needed
# [PASS] 2.17  - Ensure experimental features are avoided in production
# [WARN] 2.18  - Ensure containers are restricted from acquiring new privileges


# [INFO] 3 - Docker daemon configuration files
# [INFO] 3.1  - Ensure that docker.service file ownership is set to root:root
# [INFO]      * File not found
# [INFO] 3.2  - Ensure that docker.service file permissions are set to 644 or more restrictive
# [INFO]      * File not found
# [INFO] 3.3  - Ensure that docker.socket file ownership is set to root:root
# [INFO]      * File not found
# [INFO] 3.4  - Ensure that docker.socket file permissions are set to 644 or more restrictive
# [INFO]      * File not found
# [PASS] 3.5  - Ensure that /etc/docker directory ownership is set to root:root
# [PASS] 3.6  - Ensure that /etc/docker directory permissions are set to 755 or more restrictive
# [INFO] 3.7  - Ensure that registry certificate file ownership is set to root:root
# [INFO]      * Directory not found
# [INFO] 3.8  - Ensure that registry certificate file permissions are set to 444 or more restrictive
# [INFO]      * Directory not found
# [INFO] 3.9  - Ensure that TLS CA certificate file ownership is set to root:root
# [INFO]      * No TLS CA certificate found
# [INFO] 3.10  - Ensure that TLS CA certificate file permissions are set to 444 or more restrictive
# [INFO]      * No TLS CA certificate found
# [INFO] 3.11  - Ensure that Docker server certificate file ownership is set to root:root
# [INFO]      * No TLS Server certificate found
# [INFO] 3.12  - Ensure that Docker server certificate file permissions are set to 444 or more restrictive
# [INFO]      * No TLS Server certificate found
# [INFO] 3.13  - Ensure that Docker server certificate key file ownership is set to root:root
# [INFO]      * No TLS Key found
# [INFO] 3.14  - Ensure that Docker server certificate key file permissions are set to 400
# [INFO]      * No TLS Key found
# [PASS] 3.15  - Ensure that Docker socket file ownership is set to root:docker
# [PASS] 3.16  - Ensure that Docker socket file permissions are set to 660 or more restrictive
# [PASS] 3.17  - Ensure that daemon.json file ownership is set to root:root
# [PASS] 3.18  - Ensure that daemon.json file permissions are set to 644 or more restrictive
# [PASS] 3.19  - Ensure that /etc/default/docker file ownership is set to root:root
# [PASS] 3.20  - Ensure that /etc/default/docker file permissions are set to 644 or more restrictive


# [INFO] 4 - Container Images and Build File
# [WARN] 4.1  - Ensure a user for the container has been created
# [WARN]      * Running as root: test-alpine
# [NOTE] 4.2  - Ensure that containers use trusted base images
# [NOTE] 4.3  - Ensure unnecessary packages are not installed in the container
# [NOTE] 4.4  - Ensure images are scanned and rebuilt to include security patches
# [WARN] 4.5  - Ensure Content trust for Docker is Enabled
# [WARN] 4.6  - Ensure HEALTHCHECK instructions have been added to the container image
# [WARN]      * No Healthcheck found: [nginx:latest]
# [WARN]      * No Healthcheck found: [alpine:3.11.5 alpine:latest]
# [WARN]      * No Healthcheck found: [alpine:3.11.5 alpine:latest]
# [WARN]      * No Healthcheck found: [nginx:1.16.1-alpine]
# [WARN]      * No Healthcheck found: [hello-world:latest]
# [PASS] 4.7  - Ensure update instructions are not use alone in the Dockerfile
# [NOTE] 4.8  - Ensure setuid and setgid permissions are removed in the images
# [INFO] 4.9  - Ensure COPY is used instead of ADD in Dockerfile
# [INFO]      * ADD in image history: [nginx:latest]
# [INFO]      * ADD in image history: [alpine:3.11.5 alpine:latest]
# [INFO]      * ADD in image history: [alpine:3.11.5 alpine:latest]
# [INFO]      * ADD in image history: [nginx:1.16.1-alpine]
# [INFO]      * ADD in image history: [docker/docker-bench-security:latest]
# [NOTE] 4.10  - Ensure secrets are not stored in Dockerfiles
# [NOTE] 4.11  - Ensure verified packages are only Installed


# [INFO] 5 - Container Runtime
# [PASS] 5.1  - Ensure AppArmor Profile is Enabled
# [WARN] 5.2  - Ensure SELinux security options are set, if applicable
# [WARN]      * No SecurityOptions Found: test-alpine
# [PASS] 5.3  - Ensure Linux Kernel Capabilities are restricted within containers
# [PASS] 5.4  - Ensure privileged containers are not used
# [PASS] 5.5  - Ensure sensitive host system directories are not mounted on containers
# [PASS] 5.6  - Ensure ssh is not run within containers
# [PASS] 5.7  - Ensure privileged ports are not mapped within containers
# [NOTE] 5.8  - Ensure only needed ports are open on the container
# [PASS] 5.9  - Ensure the host's network namespace is not shared
# [WARN] 5.10  - Ensure memory usage for container is limited
# [WARN]      * Container running without memory restrictions: test-alpine
# [WARN] 5.11  - Ensure CPU priority is set appropriately on the container
# [WARN]      * Container running without CPU restrictions: test-alpine
# [WARN] 5.12  - Ensure the container's root filesystem is mounted as read only
# [WARN]      * Container running with root FS mounted R/W: test-alpine
# [PASS] 5.13  - Ensure incoming container traffic is binded to a specific host interface
# [WARN] 5.14  - Ensure 'on-failure' container restart policy is set to '5'
# [WARN]      * MaximumRetryCount is not set to 5: test-alpine
# [PASS] 5.15  - Ensure the host's process namespace is not shared
# [PASS] 5.16  - Ensure the host's IPC namespace is not shared
# [PASS] 5.17  - Ensure host devices are not directly exposed to containers
# [PASS] 5.18  - Ensure the default ulimit is overwritten at runtime, only if needed
# [PASS] 5.19  - Ensure mount propagation mode is not set to shared
# [PASS] 5.20  - Ensure the host's UTS namespace is not shared
# [PASS] 5.21  - Ensure the default seccomp profile is not Disabled
# [NOTE] 5.22  - Ensure docker exec commands are not used with privileged option
# [NOTE] 5.23  - Ensure docker exec commands are not used with user option
# [PASS] 5.24  - Ensure cgroup usage is confirmed
# [WARN] 5.25  - Ensure the container is restricted from acquiring additional privileges
# [WARN]      * Privileges not restricted: test-alpine
# [WARN] 5.26  - Ensure container health is checked at runtime
# [WARN]      * Health check not set: test-alpine
# [INFO] 5.27  - Ensure docker commands always get the latest version of the image
# [WARN] 5.28  - Ensure PIDs cgroup limit is used
# [WARN]      * PIDs limit not set: test-alpine
# [INFO] 5.29  - Ensure Docker's default bridge docker0 is not used
# [INFO]      * Container in docker0 network: test-alpine
# [PASS] 5.30  - Ensure the host's user namespaces is not shared
# [PASS] 5.31  - Ensure the Docker socket is not mounted inside any containers


# [INFO] 6 - Docker Security Operations
# [INFO] 6.1  - Avoid image sprawl
# [INFO]      * There are currently: 5 images
# [INFO] 6.2  - Avoid container sprawl
# [INFO]      * There are currently a total of 6 containers, with 2 of them currently running


# [INFO] 7 - Docker Swarm Configuration
# [PASS] 7.1  - Ensure swarm mode is not Enabled, if not needed
# [PASS] 7.2  - Ensure the minimum number of manager nodes have been created in a swarm (Swarm mode not enabled)
# [PASS] 7.3  - Ensure swarm services are binded to a specific host interface (Swarm mode not enabled)
# [PASS] 7.4  - Ensure data exchanged between containers are encrypted on different nodes on the overlay network
# [PASS] 7.5  - Ensure Docker's secret management commands are used for managing secrets in a Swarm cluster (Swarm mode not enabled)
# [PASS] 7.6  - Ensure swarm manager is run in auto-lock mode (Swarm mode not enabled)
# [PASS] 7.7  - Ensure swarm manager auto-lock key is rotated periodically (Swarm mode not enabled)
# [PASS] 7.8  - Ensure node certificates are rotated as appropriate (Swarm mode not enabled)
# [PASS] 7.9  - Ensure CA certificates are rotated as appropriate (Swarm mode not enabled)
# [PASS] 7.10  - Ensure management plane traffic has been separated from data plane traffic (Swarm mode not enabled)

# [INFO] Checks: 105
# [INFO] Score: 26

# ---

# Helper tutorial
#   https://www.digitalocean.com/community/tutorials/how-to-audit-docker-host-security-with-docker-bench-for-security-on-ubuntu-16-04


#### 1 - Host Configuration


### 1.1.1  - Ensure the container host has been Hardened / Improve host security
#     https://www.digitalocean.com/community/tutorials/7-security-measures-to-protect-your-servers

## SSH Keys > OK
## Firewalls > OK
## VPNs and Private Networking > Only one server ATM
## Public Key Infrastructure and SSL/TLS Encryption > Will be set through Traefik/Nginx

## Service Auditing
#   https://www.digitalocean.com/community/tutorials/7-security-measures-to-protect-your-servers#service-auditing
# > sudo netstat -plunt
# Nothing on 0.0.0.0 ...

## File Auditing and Intrusion Detection Systems
# Aide > https://kifarunix.com/install-and-configure-aide-on-ubuntu-18-04/
#   Wayyyyyyy too much time involved for a single person

## Isolated Execution Environments > 1 server


### 1.1.2  - Ensure Docker is up to date
# [INFO]      * Using 19.03.8, verify is it up to date as deemed necessary
# https://docs.docker.com/engine/release-notes/ > All good ATM


### 1.2.1 - Ensure a separate partition for containers has been created
# Hosted on OVH, and docker already installed, so maybe LATER:

### 1.2.2  - Ensure only trusted users are allowed to control Docker daemon
# [INFO]      * docker:x:999:the_docker_guy
# All good

### 1.2.3 > 1.2.12 - Ensure auditing is configured for various Docker files
# Install auditd
- name: Run the equivalent of "apt-get update"
  apt:
    cache_valid_time: '3600'
    force_apt_get: yes
    update_cache: yes

- name: Install and update Docker bench security required packages (auditd)
# Required packages : 'auditd'
  apt:
    name: '{{ dockerBenchSecurityPackagesToInstall }}'
    state: latest

# Configure auditd
#   Best practices.. / https://github.com/Neo23x0/auditd
# ..and add docker required stuff at the bottom
#   .. adapted for 1.3.5

# Config file is reset on service restart > https://access.redhat.com/solutions/1505033
# - Audit rules files should be placed in /etc/audit/rules.d
# - File names should end with ".rules"

- name: Configure auditd / Add rules to /etc/audit/rules.d/audit.rules
  register: auditd_config_result
  template:
    dest: /etc/audit/rules.d/audit.rules
    src: auditd-audit-rules.j2

- name: Restart auditd service if the configuration has changed, and restart on reboot
  service:
    enabled: yes
    name: auditd
    state: restarted
  when:
    - auditd_config_result.changed

# Check audit current config    > sudo auditctl -l
# Check services fail (= 0)     > sudo systemctl --failed
# Display logs                  > sudo nano /var/log/audit/audit.log
# Human readable Logs           / https://www.digitalocean.com/community/tutorials/how-to-use-the-linux-auditing-system-on-centos-7


#### 2 - Docker daemon configuration

## Apply Bench / tutorial recos
#   https://www.digitalocean.com/community/tutorials/how-to-audit-docker-host-security-with-docker-bench-for-security-on-ubuntu-16-04#step-3-%E2%80%94-correcting-docker-daemon-configuration-warnings

# Disable legacy registry
# No, deprecated / https://docs.docker.com/engine/reference/commandline/dockerd/#legacy-registries

# 2.11  - Ensure that authorization for Docker client commands is enabled
#   https://docs.docker.com/engine/extend/plugins_authorization/
# Related to TLS
# LATER: Need auth plugin creation > too much work and only the_docker_guy has rights

# 2.12  - Ensure centralized and remote logging is configured
# Logs > Switching from 'json-file' to 'syslog' > daemon.json

# 2.14  - Ensure Userland Proxy is Disabled
# Ok > daemon.json

# 2.17  - Ensure containers are restricted from acquiring new privileges
# Ok > daemon.json


#### 3 - Docker daemon configuration files
# All ok or non pertinent (no TLS / not ubuntu related stuff)


#### 4 - Container Images and Build File
# Original docker run command: alpine container, interactive, with a volume
# > docker run \
#   -i \
#   --name test-alpine \
#   --rm \
#   -t \
#   -v /home/the_docker_peon/test-volume:/home \
#   -w /home \
#   alpine \
#   /bin/ash

# 4.1  - Ensure a user for the container has been created
# get the_docker_peon user uid gid > sudo nano /etc/passwd > 1003:1003
# Add to docker run command:
#       --user 1003:1003
# Works but can't edit stuff, as all is root chmoded.
# adding read only to volume management
#       -v /home/the_docker_peon/test-volume:/home:ro \

# 4.2  - Ensure that containers use only trusted base images
# 4.3  - Ensure that unnecessary packages are not installed in the container
# 4.4  - Ensure images are scanned and rebuilt to include security patches
# LATER: yawn

# 4.5  - Ensure Content trust for Docker is Enabled
# Nope > daemon.json # Only in Docker EE $
# Need and environnement variable > export DOCKER_CONTENT_TRUST=1

# Define in the OS Specific way (Ubuntu here) for all users
#   https://help.ubuntu.com/community/EnvironmentVariables#System-wide_environment_variables
- name: Enable Docker Content Trust for all users through Ubuntu environment variable
  lineinfile:
    line: 'DOCKER_CONTENT_TRUST=1'
    path: '/etc/environment'

# 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
#        Only checks in images, not args...
# docker run args         / https://docs.docker.com/engine/reference/run/#healthcheck
#   docker health check   / https://docs.docker.com/engine/reference/builder/#healthcheck
# ansible                 / https://docs.ansible.com/ansible/latest/modules/docker_container_module.html#parameter-healthcheck

# Prevent false positives > prune all (included all non used images)
# > docker system prune
# > docker image prune -a

# --health-cmd            Command to run to check health
# --health-interval       Time between running the check, also include the first check !
# --health-retries        Consecutive failures needed to report unhealthy
# --health-timeout        Maximum time to allow one check to run
# --health-start-period   Start period for the container to initialize before starting health-retries countdown

# Check command
# > docker inspect --format='{{.State.Health.Status}}' test-alpine
# > docker inspect --format='{{.State.Health.Status}}' test-nginx

# 4.8  - Ensure setuid and setgid permissions are removed
#   Capabilities in general
#     https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities
# Drop all, allow only needed

# 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
# 4.10  - Ensure secrets are not stored in Dockerfiles
# 4.11  - Ensure only verified packages are installed
# LATER: Fine tuning on container start & images use/creation


#### 5 - Container Runtime

# 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
# Ok, applied by default, can still apply manually (loaded profile name, not path to file)
#   OK / --security-opt apparmor=docker-default
#   KO / --security-opt apparmor=docker-nginx

# 5.2  - Ensure that, if applicable, SELinux security options are set
# 5.3  - Ensure Linux Kernel Capabilities are restricted within containers
# 5.4  - Ensure that privileged containers are not used
# 5.5  - Ensure sensitive host system directories are not mounted on containers
# 5.6  - Ensure sshd is not run within containers
# Ok

# 5.7  - Ensure privileged ports are not mapped within containers
# Ok, but LATER: Need some tuning for Traefik

# 5.8  - Ensure that only needed ports are open on the container
# Ok

# 5.10  - Ensure that the memory usage for containers is limited
#   https://docs.docker.com/engine/reference/run/#user-memory-constraints
#   https://medium.com/faun/understanding-docker-container-memory-limit-behavior-41add155236c
#   https://www.serverlab.ca/tutorials/containers/docker/how-to-limit-memory-and-cpu-for-docker-containers/
# Soft limit
#   --memory-reservation="128m"
# Hard limit
#   --memory="256m"
# Disable swap (slower)
#   --memory-swap -1

# 5.11  - Ensure CPU priority is set appropriately on the container
#   https://docs.docker.com/engine/reference/run/#cpu-share-constraint
# Enforce default behavior, adjust if needed
#   --cpu-shares=1024
# 512   > Container get half less
# 2048  > Container get 2x

# 5.12  - Ensure that the container's root filesystem is mounted as read only
#   https://docs.docker.com/engine/reference/commandline/run/#mount-volume--v---read-only
# Add the read-only flag, else when using volumes there's a vulnerability on containers /root
#   --read-only
# /!\ Need to specify all writing paths as volumes.. Nginx > /tmp
#   Example nginx custom user config file : /ansible/roles/docker-installatoin/templates/nginx-custom-user.j2

# 5.13  - Ensure that incoming container traffic is bound to a specific host interface
#   https://docs.docker.com/config/containers/container-networking/
# Ok..
# KO on nginx, LATER: Might be resolved with traefik..

# 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
#   https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart
# --restart=on-failure:5
# Note: Conflict with the --rm option (remove container after execution)

# 5.15  - Ensure the host's process namespace is not shared
# 5.16  - Ensure the host's IPC namespace is not shared
# Ok > daemon.json > userns-remap to custom unprivileged user 'the_docker_peon'

# 5.17  - Ensure that host devices are not directly exposed to containers
#   No devices shared

# 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
# Ok > daemon.json

# 5.19  - Ensure mount propagation mode is not set to shared
# 5.20  - Ensure the host's UTS namespace is not shared
# Ok

# 5.21  - Ensure the default seccomp profile is not Disabled
# Ok by default, enforced with
#   --security-opt seccomp=/etc/docker/seccomp-profiles/default-docker-profile.json \

# 5.22  - Ensure docker exec commands are not used with privileged option
#   No container will run with --privileged

# 5.23  - Ensure that docker exec commands are not used with the user=root option
#   Custom user 'the_docker_peon' for each container

# 5.24  - Ensure that cgroup usage is confirmed
# Ok

# 5.25  - Ensure that the container is restricted from acquiring additional privileges
# daemon.json > "no-new-privileges": true, / But test still ko
# Enforce with
#   --security-opt="no-new-privileges:true"

# 5.26  - Ensure that container health is checked at runtime
# Ok..

# 5.27  - Ensure that Docker commands always make use of the latest version of their image
# IDK how

# 5.28  - Ensure that the PIDs cgroup limit is used
#   ~nothing in docker docs
#   http://dockerlabs.collabnix.com/advanced/security/cgroups/#step-6-preventing-a-fork-bomb
# --pids-limit 200

# 5.29  - Ensure that Docker's default bridge 'docker0' is not used
#   https://docs.docker.com/network/network-tutorial-standalone/
# Need to create a default bridge network for standalone containers..
#   > docker network create --driver bridge custom-bridge
# .. and then attach standalone containers to it
#   --network custom-bridge

# 5.30  - Ensure that the host's user namespaces are not shared
# Ok > daemon.json > userns-remap to custom unprivileged user 'the_docker_peon'

# 5.31  - Ensure that the Docker socket is not mounted inside any containers
# Ok, LATER: Use a proxy container for traefik access to socket


#### 6 - Docker Security Operations
# 6.1  - Ensure that image sprawl is avoided
# 6.2  - Ensure that container sprawl is avoided
# LATER: ansible or CRON > docker system prune -f


#### Best practices / Apply labels
#     https://docs.docker.com/config/labels-custom-metadata/
# 1. Prefix each label key with the reverse DNS notation, ex: com.example.some-label
# 2. Label keys should begin and end with a lower-case letter and should only contain
#       lower-case alphanumeric characters, the period character (.), and the hyphen character (-).
#       Consecutive periods or hyphens are not allowed.
# 3. The period character (.) separates namespace "fields".
#       Label keys without namespaces are reserved for CLI use, allowing users of the CLI to
#       interactively label Docker objects using shorter typing-friendly strings
# Label networks / https://docs.docker.com/engine/reference/commandline/network_create/#options
# Label volumes  / https://docs.docker.com/engine/reference/commandline/volume_create/#options
#   Can't assign volume labels if created on the fly

# ### docker run with all arguments
# # Create custom bridge network
# > docker network create \
#   --driver bridge \
#   --label fr.masamune.client="masamune" \
#   --label fr.masamune.maintainer="masamune.code@gmail.com" \
#   --label fr.masamune.project="custom bridge network" \
#   --label fr.masamune.type="test" \
#   custom-bridge

# ## Alpine
# > docker run \
#   --cap-drop=ALL \
#   --cpu-shares=1024 \
#   --health-cmd='stat /etc/passwd || exit 1' \
#   --health-interval=10s \
#   --health-retries=3 \
#   --health-timeout=10s \
#   --health-start-period=0s \
#   -i \
#   --label fr.masamune.client="masamune" \
#   --label fr.masamune.maintainer="masamune.code@gmail.com" \
#   --label fr.masamune.project="curated alpine" \
#   --label fr.masamune.type="test" \
#   --memory-reservation="128m" \
#   --memory="256m" \
#   --memory-swap -1 \
#   --name test-alpine \
#   --network custom-bridge \
#   --pids-limit 200 \
#   --read-only \
#   --restart=on-failure:5 \
#   --security-opt="no-new-privileges:true" \
#   --security-opt apparmor=docker-default \
#   --security-opt seccomp=/etc/docker/seccomp-profiles/default-docker-profile.json \
#   -t \
#   --user 1003:1003 \
#   -v /home/the_docker_peon/tests-volume:/home:ro \
#   -w /home \
#   alpine \
#   /bin/ash

# ## Nginx
# #   Can use a special user with some configuration > edit /etc/nginx/nginx.conf for '/tmp/' folders, and auth user for port publish
# #       Example nginx custom user config file : /ansible/roles/docker-installatoin/templates/nginx-custom-user.j2
# # Can curl for healthceck :o
# #   --health-cmd='curl http://da_website.com/ || exit 1' \
# # Needs no capabilities if run as non root, also no need for net_bind_service if outputs on ports > 1024 (usually HTTP 80 & HTTPS 443) but we'll reverse proxy
# #   https://stackoverflow.com/a/45570342/12026487
# # Default apparmor nginx profile > when added, need mkdir rights / nginx: [alert] could not open error log file: open() "/var/log/nginx/error.log" failed (13: Permission denied)

### /!\ Needs specific conf to run with custom user > /ansible/roles/docker-installatoin/templates/nginx-custom-user.j2

# > docker run \
#   --cap-drop=ALL \
#   --cpu-shares=1024 \
#   --health-cmd='stat /etc/nginx/nginx.conf || exit 1' \
#   --health-interval=10s \
#   --health-retries=3 \
#   --health-timeout=10s \
#   --health-start-period=0s \
#   -i \
#   --label fr.masamune.client="masamune" \
#   --label fr.masamune.maintainer="masamune.code@gmail.com" \
#   --label fr.masamune.project="curated nginx" \
#   --label fr.masamune.type="test" \
#   --memory-reservation="128m" \
#   --memory="256m" \
#   --memory-swap -1 \
#   --name test-nginx \
#   --network custom-bridge \
#   -p 80:80 \
#   --pids-limit 200 \
#   --restart=on-failure:5 \
#   --security-opt="no-new-privileges:true" \
#   --security-opt apparmor=docker-default \
#   --security-opt seccomp=/etc/docker/seccomp-profiles/default-docker-profile.json \
#   --sysctl net.ipv4.ip_unprivileged_port_start=0 \
#   -t \
#   --user 1003:1003 \
#   -v /home/the_docker_peon/tests-volume/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
#   -v /home/the_docker_peon/tests-volume/nginx/content:/usr/share/nginx/html:ro \
#   -w /usr/share/nginx/html \
#   nginx:alpine

# Step 4: Score 26 > 51 :)
# Step 5: Score 51 > 71 :)
...