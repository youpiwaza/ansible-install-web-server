---
### Configure iptables firewall
# Requires 'iptables' package
#   https://doc.ubuntu-fr.org/iptables
#     Ansible config only edits current rules, wipped on server restart
#     # https://docs.ansible.com/ansible/latest/modules/iptables_module.html
#   Better supply a raw config file
#   https://github.com/nickjj/ansible-iptables
#
# iptable rules inspection  > sudo iptables -L

# TODO: Not sure, to be tested
#   iptables original logs    > sudo vim /var/log/kern.log
#   iptables original logs    > sudo vim /var/log/syslog
#   iptables new logs path    > sudo vim /var/log/iptables.log

## Manual config test
# > sudo systemctl --failed
# > sudo systemctl status iptables-restore.service
# > sudo systemctl start iptables-restore.service

- name: Install required packages
  # include: install-packages.yml
  include_tasks: install-packages.yml

- name: Configure iptables firewall / Create /var/lib/iptables directory
  file:
    path: /var/lib/iptables
    state: directory
    owner: root
    group: root
    mode: 0755

# User validation : local generation of iptables config file
- name: Playbook validation > local generation of iptables config file
  template:
    src: rules-save.j2
    dest: _iptable-rules-save-generated
  delegate_to: 127.0.0.1
  register: iptables_register_config

- name: Generate iptables config
  template:
    src: rules-save.j2
    dest: /var/lib/iptables/rules-save
    owner: root
    group: root
    mode: 0644
  register: iptables_register_config

# Restore config on restart
- name: Restore iptables config on restart / Copy systemd unit file
  template:
    src: restore.service.j2
    dest: /etc/systemd/system/iptables-restore.service
    owner: root
    group: root
    mode: 0644
  register: iptables_register_unit

- name: Reload systemd daemon
  command: 'systemctl daemon-reload'
  when: iptables_register_unit.changed

- name: Let some time before iptables restart / sleep for 5 seconds and continue with play
  delegate_to: 127.0.0.1
  wait_for:
    timeout: 5

# LATER: Sometimes crash on first execution ?
- name: Restart iptables service
  service:
    name: iptables-restore
    state: restarted
    enabled: yes
  when: iptables_register_config.changed

  # TODO: test
- name: Restart dependent services
  shell: 'test -f {{ item.path }}/{{ item.name }}.service \
          && systemctl restart {{ item.name }}.service || true'
  with_items: '{{ security_firewall__iptables_restart_dependent_services }}'
  when: security_firewall__iptables_restart_dependent_services and iptables_register_config.changed

## Custom log file
#   https://askubuntu.com/a/348448
- name: Add a /etc/rsyslog.d/ rule file for iptables
  lineinfile:
    # Scan for '[netfilter] ' log-prefix added in /templates/rules-save.j2
    line: ':msg,contains,"[netfilter] " /var/log/iptables.log'
    path: /etc/rsyslog.d/my_iptables.conf
    # Create a file and add a line if it didn't exist before
    create: yes
  register: iptables_register_log_config
  # TODO: validate > rsyslogd -f /etc/rsyslog.conf -N1

- name: Restart rsyslog service
  service:
    name: 'rsyslog'
    state: 'restarted'
    enabled: yes
  when: iptables_register_log_config.changed

# Docker manipulates iptables rules, adds it's own, and they shouldn't be removed
#   https://docs.docker.com/network/iptables/
# But they get regenerated when docker service is restarted
#   https://stackoverflow.com/a/29980145/12026487
# In case "Restart dependant services" didn't do the job > restart docker service
# (Especially if the playbook was lunched multiples times > iptables config override, after docker installation)
- name: Check if docker service exists
  stat:
    path: /etc/init.d/docker
  register: docker_service_status

# - debug:
#     msg: '{{ docker_service_status.stat.exists }}'

- name: "Restart docker service to add back docker's iptables automatic rules"
  service:
    name: docker
    state: restarted
  when: docker_service_status.stat.exists == true

# # Error example, for Ctrl + Shift + F guys
# # docker: Error response from daemon:
# # driver failed programming external connectivity on endpoint

# # test-apparmor-nginx (6411d07f8fcb61cb92cfc7b24ea867137fcc79a27331cc0661f02f8bd2a174ed):  

# # (
# #     iptables failed: iptables --wait -t filter -A DOCKER !
# #     -i docker0 -o docker0 -p tcp -d 172.17.0.2 --dport 80 -j ACCEPT:
# #     iptables: No chain/target/match by that name.
# #     (exit status 1)
# #  ).
...