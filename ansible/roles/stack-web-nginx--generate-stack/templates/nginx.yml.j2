version: '3.7'

##---
## ðŸ¤– This file has been generated automatically through Ansible and **should not be edited by hand**.
## See the [original script](https://github.com/youpiwaza/ansible-install-web-server/blob/master/ansible/roles/stack-web-nginx--generate-stack/tasks/generate-yml.yml)
## & [original template file](https://github.com/youpiwaza/ansible-install-web-server/blob/master/ansible/roles/stack-web-nginx--generate-stack/templates/nginx.yml.j2).
## *Generated (yyyy-mm-dd) {{ currentDateTime }}*.
##---

# Based on nginx image
#   https://hub.docker.com/_/nginx
#   https://nginx.com/

# cf. https://github.com/youpiwaza/server-related-tutorials/tree/master/01-docker/04-my-tests/09-traefik-curated/11-prod-hello-curated/08-hello-stack-curated-comments

services:
  nginx:
    # cap_drop:
    #   - ALL
    # # /!\ Only works with docker stack deploy, use bind volume for docker-compose
    configs:
      - source: nginx_config
        target: '/etc/nginx/nginx.conf'
        # user specific
        uid: '1003'
        gid: '1003'
        # read-only
        mode: 0440
    # cpu_shares: 1024
    deploy:
      endpoint_mode: vip
      labels:
        # Tell Traefik to get the contents provided by this service using that shared network.
        - "traefik.docker.network=core---traefik-public--access-internet"
        # Allow internet exposition (publish on port 80)
        - "traefik.enable=true"
        
        ## HTTPS router specifications
        # Entrypoint
        - "traefik.http.routers.https_{{ traefik.uid }}__nginx__Router.entrypoints=websecure"
        # On which url ? Reverse proxy regexp
        - "traefik.http.routers.https_{{ traefik.uid }}__nginx__Router.rule=Host(`{{ traefik.public_uri }}`)"
        # Use the service created below specifying the internal port
        - "traefik.http.routers.https_{{ traefik.uid }}__nginx__Router.service=https_{{ traefik.uid }}__nginx__Service"
        # Enable TLS
        - "traefik.http.routers.https_{{ traefik.uid }}__nginx__Router.tls=true"
        # Automtic certifcate resolver, created in traefik.yml
        - "traefik.http.routers.https_{{ traefik.uid }}__nginx__Router.tls.certresolver=leresolver"
        
        # Create a service specifying the internal port
        # Internal port > 1024 to prevent usage of root restricted ports
        - "traefik.http.services.https_{{ traefik.uid }}__nginx__Service.loadbalancer.server.port=8080"

        ## HTTP_ router / Redirect every http requests to their https equivalent
        # Create a middleware to redirect http to https
        #     Middleware aren't shared ?
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # All hosts..
        - "traefik.http.routers.http_{{ traefik.uid }}__nginx__Router.rule=hostregexp(`{host:.+}`)"
        # .. coming from entrypoint web ..
        - "traefik.http.routers.http_{{ traefik.uid }}__nginx__Router.entrypoints=web"
        # .. use the previously created middleware
        - "traefik.http.routers.http_{{ traefik.uid }}__nginx__Router.middlewares=redirect-to-https"

        - "{{ project.labels_prefix }}.client='{{ project.client_name }}'"
        - "{{ project.labels_prefix }}.maintainer='{{ project.maintainer }}'"
        - "{{ project.labels_prefix }}.project='{{ project.name }} / Nginx'"
        - "{{ project.labels_prefix }}.type='{{ project.type }}'"
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 120s
      rollback_config:
        delay: 0s
        failure_action: pause
        max_failure_ratio: 0
        monitor: 0s
        order: stop-first
        parallelism: 1
      update_config:
        delay: 10s
        failure_action: pause
        max_failure_ratio: 0
        monitor: 0s
        order: stop-first
        parallelism: 1
    healthcheck:
      test: 'stat /www/index.php || exit 1'
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 0s
    image: tutum/hello-world:latest
    labels:
      {{ project.labels_prefix }}.client: '{{ project.client_name }}'
      {{ project.labels_prefix }}.maintainer: '{{ project.maintainer }}'
      {{ project.labels_prefix }}.project: '{{ project.name }} / Nginx'
      {{ project.labels_prefix }}.type: '{{ project.type }}'
    # Debug with docker-compose up
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    # --memory-reservation="128m"
    # --memory="256m"
    # --memory-swap -1
    networks:
      # Connect to traefik dedicated overlay network, allow reverse proxy
      - core---traefik-public--access-internet
    # --pids-limit 200
    # /!\ Specify the internal port, WITHOUT binding it !
    ports:
      - "8080"
    # # Needs write acces for /tmp/ files
    # read_only: true
    security_opt:
      - no-new-privileges=true
      - apparmor=docker-default
      - seccomp=/etc/docker/seccomp-profiles/default-docker-profile.json
    # the_docker_peon unpriviledged namespaced user
    user: 1003:1003
    # # ulimits > kinda random as I couldn't find any recommandations. Defaults.
    # ulimits:
    #   nofile: 
    #     hard: 4096
    #     soft: 2048
    #   nproc:
    #     hard: 512
    #     soft: 256
    # Mount a prepared volume with existing log files (php-fpm.log, /nginx/access.log, /nginx/error.log) with proper rights (1003:1003), incl. the nginx/ folder
    volumes:
      - type: volume
        read_only: false
        source: {{ project.type }}---{{ project.dashed_domain }}---nginx--logs
        target: /var/log/
      # # Note: Use config for docker stack deploy. Bind volumes can be a security issue, and should only be used for debug through docker-compose up
      # # - '/home/{{ users.3.name }}/{{ project.type }}s/{{ project.client_name }}/{{ project.dashed_domain }}/stack/{{ project.dashed_domain }}---nginx--generated.conf:/etc/nginx/nginx.conf:ro'
      # - type: bind
      #   read_only: true
      #   source: /home/{{ users.3.name }}/{{ project.type }}s/{{ project.client_name }}/{{ project.dashed_domain }}/stack/{{ project.dashed_domain }}---nginx--generated.conf
      #   target: /etc/nginx/nginx.conf

configs:
  nginx_config:
    # cf. ansible/roles/stack-web-nginx--generate-stack/tasks/generate-config.yml
    file: '/home/{{ users.3.name }}/{{ project.type }}s/{{ project.client_name }}/{{ project.dashed_domain }}/stack/{{ project.dashed_domain }}---nginx--generated.conf'
    

networks:
  core---traefik-public--access-internet:
    # Connect to an existing network, do not recreate one with a prefix
    external: true

volumes:
  {{ project.type }}---{{ project.dashed_domain }}---nginx--logs:
    # Use an existing volume, do not recreate one with a prefix
    external: true