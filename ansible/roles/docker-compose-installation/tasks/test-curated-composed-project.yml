---
### Test curated docker-compose through nginx + phpfpm

# https://github.com/youpiwaza/server-related-tutorials/tree/master/01-docker/04-my-tests/02-compose-nginx-php



## Requires a swarm manager as the curated project contains a deploy section, even if not used
## Don't stop swarm if it is already started
# Test must not kill production
# If it isn't, start a swarm for the test and remove it afterward

# Get swarm info / docker system info / https://docs.docker.com/get-started/swarm-deploy/
- name: Test curated docker-compose through nginx + phpfpm / Get info on docker host
  docker_host_info:
  register: result

# - name: Display full info
#   delegate_to: 127.0.0.1
#   debug:
#     msg: '{{ result.host_info }}'

# - name: Display swarm started info
#   delegate_to: 127.0.0.1
#   debug:
#     msg: '{{ result.host_info.Swarm.ControlAvailable }}'

- name: 'Swarm started ? {{ result.host_info.Swarm.ControlAvailable }}'
  delegate_to: 127.0.0.1
  debug:
    msg: "Swarm detected, using it for this test"
  when: result.host_info.Swarm.ControlAvailable|bool == true

- name: 'Swarm started ? {{ result.host_info.Swarm.ControlAvailable }}'
  delegate_to: 127.0.0.1
  debug:
    msg: "No swarm detected, creating one for this test, and remove it afterwards"
  when: result.host_info.Swarm.ControlAvailable|bool == false

## Start services
- name: Init a new swarm with default parameters, if needed
  docker_swarm:
    state: present
  # Only init swarm for test if none is present
  when: result.host_info.Swarm.ControlAvailable|bool == false



## Clone project on remote host, then start composition
# Re-create folder
- name: Test curated docker-compose through nginx + phpfpm / Remove test directory
  file:
    path: '/home/{{ users.3.name }}/tests/{{ docker_compose_installation__publicRepoCurated.name }}/'
    state: absent

- name: Create test directory
  file:
    path: '/home/{{ users.3.name }}/tests/{{ docker_compose_installation__publicRepoCurated.name }}/'
    state: directory
    mode: '0755'

# Clone public repo
#   https://docs.ansible.com/ansible/latest/modules/git_module.html
- name: 'Clone project {{ docker_compose_installation__publicRepoCurated.name }} from {{ docker_compose_installation__publicRepoCurated.uri }} in test folder'
  git:
    clone: yes
    dest: '/home/{{ users.3.name }}/tests/{{ docker_compose_installation__publicRepoCurated.name }}/'
    repo: '{{ docker_compose_installation__publicRepoCurated.uri }}'

- name: Warning about running container
  delegate_to: 127.0.0.1
  debug:
    msg: 'Be careful, if this playbook fails, it will not end and 2 containers will still be running !'

## Start composition
- name: Create and start composition
  docker_compose:
    project_name: docker-compose-curated-test
    project_src: '/home/{{ users.3.name }}/tests/{{ docker_compose_installation__publicRepoCurated.name }}/'
    state: present
  register: output

# - name: Debug
#   delegate_to: 127.0.0.1
#   debug:
#     var: output

## Check composition
- name: Check that you can connect (GET) to a page and it returns a status 200
  uri:
    url: 'http://{{ ansible_host }}/'

- name: "Check that a page returns a status 200 and fail if the words 'Fuck yeah' is not in the page contents"
  uri:
    url: 'http://{{ ansible_host }}/'
    return_content: yes
  register: da_webpage
  failed_when: "'Fuck yeah' not in da_webpage.content"

- name: Display page content in ansible logs
  delegate_to: 127.0.0.1
  debug:
    msg:
      - 'Affichage du contenu de la page :'
      - '{{ da_webpage.content }}'

# Stop and remove test
- name: Stop and remove composition
  docker_compose:
    project_name: docker-compose-curated-test
    project_src: '/home/{{ users.3.name }}/tests/{{ docker_compose_installation__publicRepoCurated.name }}/'
    state: absent

- name: Remove test directory
  file:
    path: '/home/{{ users.3.name }}/tests/{{ docker_compose_installation__publicRepoCurated.name }}/'
    state: absent

# Remove swarm if needed
- name: Remove a swarm manager
  docker_swarm:
    state: absent
    force: true
  # Only stop swarm for test if none was present
  when: result.host_info.Swarm.ControlAvailable|bool == false
...