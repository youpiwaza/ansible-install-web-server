---
### Test docker stack through nginx service + phpfpm service + network

## Don't stop swarm if it is already started
# Test must not kill production
# If it isn't, start a swarm for the test and remove it afterward

# Get swarm info / docker system info / https://docs.docker.com/get-started/swarm-deploy/
- name: Test docker stack through nginx service + phpfpm service + network / Get info on docker host
  docker_host_info:
  register: result

# - name: Display full info
#   delegate_to: 127.0.0.1
#   debug:
#     msg: '{{ result.host_info }}'

# - name: Display swarm started info
#   delegate_to: 127.0.0.1
#   debug:
#     msg: '{{ result.host_info.Swarm.ControlAvailable }}'

- name: 'Swarm started ? {{ result.host_info.Swarm.ControlAvailable }}'
  delegate_to: 127.0.0.1
  debug:
    msg: "Swarm detected, using it for this test"
  when: result.host_info.Swarm.ControlAvailable|bool == true

- name: 'Swarm started ? {{ result.host_info.Swarm.ControlAvailable }}'
  delegate_to: 127.0.0.1
  debug:
    msg: "No swarm detected, creating one for this test, and remove it afterwards"
  when: result.host_info.Swarm.ControlAvailable|bool == false

## Start services
# https://docs.ansible.com/ansible/latest/modules/docker_stack_module.html#examples
- name: Init a new swarm with default parameters, if needed
  docker_swarm:
    state: present
  # Only init swarm for test if none is present
  when: result.host_info.Swarm.ControlAvailable|bool == false

## Test services
- name: Warning about running service
  delegate_to: 127.0.0.1
  debug:
    msg: 'Be careful, if this playbook fails, it will not end and 2 services and a network will still be running !'

## Install project
# Eventually remove previous network, as it must be created via swarm
- name: Remove (eventual) previous custom network (must be created via swarm)
  docker_network:
    force: yes
    name: test-nginx-phpfpm-stack_network-php
    state: absent

# Re-create folder
- name: Remove test directory
  file:
    path: '/home/{{ users.3.name }}/tests/{{ docker_swarm_installation__publicRepo.name }}/'
    state: absent

- name: Create test directory
  file:
    path: '/home/{{ users.3.name }}/tests/{{ docker_swarm_installation__publicRepo.name }}/'
    state: directory
    mode: '0755'

# Clone public repo
#   https://docs.ansible.com/ansible/latest/modules/git_module.html
- name: 'Clone project {{ docker_swarm_installation__publicRepo.name }} from {{ docker_swarm_installation__publicRepo.uri }} in test folder'
  git:
    clone: yes
    dest: '/home/{{ users.3.name }}/tests/{{ docker_swarm_installation__publicRepo.name }}/'
    repo: '{{ docker_swarm_installation__publicRepo.uri }}'

## Start services from docker-compose.yml file
- name: Deploy stack from a compose file, might take a minute
  docker_stack:
    name: test-nginx-phpfpm-stack
    compose:
      - '/home/{{ users.3.name }}/tests/{{ docker_swarm_installation__publicRepo.name }}/docker-compose.yml'
    # default state is present
    # state: present

# Wait for the service to start before testing
# https://medium.com/planetarynetworks/ansible-wait-for-with-docker-container-31d3944da953
# https://docs.ansible.com/ansible/latest/modules/wait_for_module.html
- name: Wait for service to publish on port 80
  wait_for:
    port: 80

## Check service
- name: Check that you can connect (GET) to a page and it returns a status 200
  uri:
    url: 'http://{{ ansible_host }}/'

- name: "Check that a page returns a status 200 and fail if the words 'Fuck yeah' is not in the page contents"
  uri:
    url: 'http://{{ ansible_host }}/'
    return_content: yes
  register: da_webpage
  failed_when: "'Fuck yeah' not in da_webpage.content"

- name: Display page content in ansible logs
  delegate_to: 127.0.0.1
  debug:
    msg:
      - 'Affichage du contenu de la page :'
      - '{{ da_webpage.content }}'

## Remove test services, and shut down swarm if needed
# Remove test
- name: Remove stack
  docker_stack:
    name: test-nginx-phpfpm-stack
    state: absent

- name: Let docker remove stack / sleep for 5 seconds and continue with play
  delegate_to: 127.0.0.1
  wait_for:
    timeout: 5

- name: Remove test directory
  file:
    path: '/home/{{ users.3.name }}/tests/{{ docker_swarm_installation__publicRepo.name }}/'
    state: absent

# Remove swarm if needed
- name: Remove a swarm manager
  docker_swarm:
    state: absent
    force: true
  # Only stop swarm for test if none was present
  when: result.host_info.Swarm.ControlAvailable|bool == false
...