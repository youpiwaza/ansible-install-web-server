---
### Test docker swarm through a nginx service

## Test service directly on remote host
# Create nginx service
# > sudo docker service create --name demo-nginx --publish 80:80 nginx:1.16.1-alpine
# List active services
# > sudo docker service ls
# >> ID                  NAME                MODE                REPLICAS            IMAGE                 PORTS
# >> o9nkdsla20t2        demo-nginx          replicated          1/1                 nginx:1.16.1-alpine   *:80->80/tcp
# Test website on http://{{ ansible_host }}/ (use remote host IP)
# Remove service
# > sudo docker service rm demo-nginx

## Don't stop swarm if it is already started
# Test must not kill production
# If it isn't, start a swarm for the test and remove it afterward

# Get swarm info / docker system info / https://docs.docker.com/get-started/swarm-deploy/
- name: Get info on docker host
  docker_host_info:
  register: result

# - name: Display full info
#   debug:
#     msg: '{{ result.host_info }}'

# - name: Display swarm started info
#   debug:
#     msg: '{{ result.host_info.Swarm.ControlAvailable }}'

- name: 'Swarm started ? {{ result.host_info.Swarm.ControlAvailable }}'
  debug:
    msg: "Swarm detected, using it for this test"
  when: result.host_info.Swarm.ControlAvailable|bool == true

- name: 'Swarm started ? {{ result.host_info.Swarm.ControlAvailable }}'
  debug:
    msg: "No swarm detected, creating one for this test, and remove it afterwards"
  when: result.host_info.Swarm.ControlAvailable|bool == false

## Start services
- name: Init a new swarm with default parameters
  docker_swarm:
    state: present
  # Only init swarm for test if none is present
  when: result.host_info.Swarm.ControlAvailable|bool == false

## Test services
- name: Warning about running service
  debug:
    msg: 'Be careful, if this playbook fails, it will not end and 1 service will still be running !'

# https://hub.docker.com/_/nginx
- name: Start nginx service, on port 80 (other are closed by firewall)
  docker_swarm_service:
    image: '{{ nginxTestImage }}'
    name: test-nginx-service
    publish:
    - published_port: 80
      target_port: 80
    # default state is present
    # state: present

# Wait for the service to start before testing
# https://docs.ansible.com/ansible/latest/modules/docker_swarm_service_info_module.html#examples
- name: Get info from test service
  docker_swarm_service_info:
    name: test-nginx-service
  register: my_service_status

# - name: Display service status
#   debug:
#     msg: '{{ my_service_status }}'

## Check service
# https://medium.com/planetarynetworks/ansible-wait-for-with-docker-container-31d3944da953
# https://docs.ansible.com/ansible/latest/modules/wait_for_module.html
- name: Wait for service to publish on port 80
  wait_for:
    port: '{{ my_service_status.service.Endpoint.Ports.0.PublishedPort }}'

- name: Check that you can connect (GET) to a page and it returns a status 200
  uri:
    url: 'http://{{ ansible_host }}/'

- name: "Check that a page returns a status 200 and fail if the words 'Welcome to nginx!' is not in the page contents"
  uri:
    url: 'http://{{ ansible_host }}/'
    return_content: yes
  register: da_webpage
  failed_when: "'Welcome to nginx!' not in da_webpage.content"

- name: Display page content in ansible logs
  debug:
    msg: 'Affichage du contenu de la page :\n\n{{ da_webpage.content }}'

## Remove test services, and shut down swarm if needed
# Remove test
- name: Stop nginx service
  docker_swarm_service:
    image: '{{ nginxTestImage }}'
    name: test-nginx-service
    state: absent

# Remove swarm if needed
- name: Remove a swarm manager
  docker_swarm:
    state: absent
    force: true
  # Only stop swarm for test if none was present
  when: result.host_info.Swarm.ControlAvailable|bool == false
...